QUALIDADE

 . Conceito

	Qualidade é um conceito subjetivo e está relacionado às percepções de cada indivíduo e diversos fatores como: cultura, crenças, valores, posição social e entre outros. Em termos de produtos e serviços qualidade se relaciona diretamente com as exigências, expectativas e necessidades dos clientes, como por exemplo: valor agregado, relação custo-benefício, durabilidade e acessibilidade.

	Seguindo nesta direção temos algumas definições importantes já conhecidas e estudadas. "Qualidade é a habilidade de um conjunto de características inerentes a um produto, componente de produto ou processo atenderem aos requisitos dos clientes" (SEI, 2006). 
	Podemos observar que qualidade está diretamente vinculada com as expectativas e necessidades do cliente. Segundo Philip Crosby (CROSBY, 1979) qualidade é estabelecer conformidade com os requisitos. Para a norma norma ISO9000 estabelece também que a “qualidade é o grau no qual um conjunto de características inerentes satisfaz a requisitos” (ISO9000:2005). 

	Desta forma, assim como para outros setores, qualidade é fator crítico de sucesso para a indústria de software (MR-MPS-SW:2012, 2012), tendo em vista o acelerado avanço tecnológico rápido e inovador e também cada vez mais presente no cotidiano dos indivíduos.

 . Qualidade do produto de Software

	A Qualidade de Software é também algo complexo, no entanto, alguns fatores ou conjunto de atributos podem classificar a qualidade. McCall (MACCALL, 1977) propõe uma categorizarão dos fatores da qualidade de software, com ênfase em três aspectos importantes: Características manutenção, operação, e sua capacidade de adaptabilidade.

<<<
INSERIR FIGURA - McCall Model
>>>
	Boehm acrescentou algumas características com o modelo de McCall com ênfase na capacidade de manutenção do produto de software (BOTELLA, 2004). Além disso, o modelo inclui considerações envolvidas na avaliação de um software produto no que diz respeito à utilidade do programa. O modelo proposto por Boehm é similar ao modelo de McCall e que representa uma hierárquica estrutura de características, cada um dos quais contribui para o qualidade total. A noção de Boehm inclui as necessidades dos usuários, assim como McCall, no entanto, o modelo de Boehm contém apenas um diagrama, sem qualquer sugestão de como medir as características de qualidade (BEHKAMAL, 2008).

<<<
INSERIR FIGURA - Boehm Model
>>>
	Outro modelo também muito conhecido foi o FURPS (WATSON, 2006) proposto por Robert Grady e HewlettPackard Co. que decompõe características em duas categorias diferentes de requisitos:

	Os requisitos funcionais: Definido pela entrada e saída esperada.
	Os requisitos não funcionais: Usabilidade, confiabilidade, desempenho e capacidade de suporte.

	Uma desvantagem do modelo FURPS é que ele não leva em conta a portabilidade do produto de software (BEHKAMAL, 2008).

	Muitos outros modelos surgiram, contudo, havia a necessidade de um modelo padrão, e com isso deu-se início a ISO/IEC JTC1 que buscou desenvolver consensos necessários e incentivar a normalização a nível mundial sobre os modelos de qualidade de software. As primeiras considerações foram feitas em 1978, e dando início em 1985 a ISO/IEC 9126. A ISO/IEC 9126 é parte da norma ISO 9000, que é o padrão mais importante para a garantia da qualidade, no entanto, foi revisada em 2011 pela norma ISO/IEC 25010:2011 (ISO/IEC 25010, 2011).

	A norma ISO/IEC 25010, propõe um conjunto de atributos de Qualidade, distribuídos em 8 (oito) conjuntos principais, com cada uma deles divididos em sub-características descritas pela norma. A nova norma tem oito características de qualidade do produto, em contraste com a ISO 9126 com seis, e 31 sub características.

// TODO : INSERT HERE


	$-> Funcionalidade: A capacidade de um software prover funcionalidades que satisfaçam o usuário em suas necessidades declaradas e implícitas, dentro de um determinado contexto de uso.

Suas sub-características são:
	. Adequação, que mede o quanto o conjunto de funcionalidades é adequado às necessidades do usuário;
	Acurácia (ou precisão) representa a capacidade do software de fornecer resultados precisos ou com a precisão dentro do que foi acordado/solicitado;
	
	. Interoperabilidade que trata da maneira como o software interage com outro(s) sistema(s) especificados;

	. Segurança mede a capacidade do sistema de proteger as informações do usuário e fornecê-las apenas (e sempre) às pessoas autorizadas

	. Conformidade trata da padronização, politicas e normas de um projeto.


	$-> Confiabilidade: O produto se mantém no nível de desempenho nas condições estabelecidas.

Suas sub-características são:
	. Maturidade, entendida como sendo a capacidade do software em evitar falhas decorrentes de defeitos no software;
	. Tolerância a Falhas representando a capacidade do software em manter o funcionamento adequado mesmo quando ocorrem defeitos nele ou nas suas interfaces externas;
	. Recuperabilidade que foca na capacidade de um software se recuperar após uma falha, restabelecendo seus níveis de desempenho e recuperando os seus dados;
	

	$-> Usabilidade: Mede a capacidade do produto de software ser compreendido, seu funcionamento aprendido, ser operado e ser atraente ao usuário.

Suas sub-características são:
	. Inteligibilidade que representa a facilidade com que o usuário pode compreender as suas funcionalidades e avaliar se o mesmo pode ser usado para satisfazer as suas necessidades específicas;
	. Apreensibilidade identifica a facilidade de aprendizado do sistema para os seus potenciais usuários;
	. Operacionalidade é como o produto facilita a sua operação por parte do usuário, incluindo a maneira como ele tolera erros de operação;
	. Atratividade envolve características que possam atrair um potencial usuário para o sistema, o que pode incluir desde a adequação das informações prestadas para o usuário até os requintes visuais utilizados na sua interface gráfica;


	$-> Eficiência: O tempo de execução e os recursos envolvidos são compatíveis com o nível de desempenho do software.

Suas sub-características são:
	. Comportamento em Relação ao Tempo que avalia se os tempos de resposta (ou de processamento) estão dentro das especificações;
	. Utilização de Recursos que mede tanto os recursos consumidos quanto a capacidade do sistema em utilizar os recursos disponíveis;


	$-> Manutenibilidade: A capacidade (ou facilidade) do produto de software ser modificado, incluindo tanto as melhorias ou extensões de funcionalidade quanto as correções de defeitos, falhas ou erros.

Suas sub-características são:
	. Analisabilidade identifica a facilidade em se diagnosticar eventuais problemas e identificar as causas das deficiências ou falhas;
	. Modificabilidade caracteriza a facilidade com que o comportamento do software pode ser modificado;
	. Estabilidade avalia a capacidade do software de evitar efeitos colaterais decorrentes de modificações introduzidas;
	. Testabilidade representa a capacidade de se testar o sistema modificado, tanto quanto as novas funcionalidades quanto as não afetadas diretamente pela modificação;
	
	$-> Portabilidade: A capacidade do sistema ser transferido de um ambiente para outro.

Suas sub-características são:

	. Adaptabilidade, representando a capacidade do software se a adaptar a diferentes ambientes sem a necessidade de ações adicionais (configurações);
	. Capacidade para ser Instalado identifica a facilidade com que pode se instalar o sistema em um novo ambiente;
	. Coexistência mede o quão facilmente um software convive com outros instalados no mesmo ambiente;
	. Capacidade para Substituir representa a capacidade que o sistema tem de substituir outro sistema especificado, em um contexto de uso e ambiente específicos.


// END TODO.


<<<
http://en.wikipedia.org/wiki/ISO/IEC_9126#Developments
http://en.wikipedia.org/wiki/Software_quality
>>>

 . Qualidade PMBok
 .. Controle da qualidade

 .. Garantia da qualidade

 .. Planejamento da qualidade



REFERÊNCIAS

BEHKAMAL, Behshid., Mohsen Kahani, Mohammad Kazem Akbari. Customizing ISO 9126 quality model for evaluation of B2B applications. Copyright 2008 Elsevier B.V. September 2008.

BOTELLA P., X. Burgues, J.P. Carvallo, X. Franch, C. Quer, Using Quality Models for Assessing COTS Selection, in: Proceeding of MPEC’04 and ICSE’04, 2004.

ISO/IEC 25010. Systems and software engineering - Systems and software Quality Requirements and Evaluation (SQuaRE) - System and software quality models, 2011. Disponível em http://www.iso.org/iso/catalogue_detail.htm?csnumber=35733, acessado em 14 Março 2015.

MACCAL, J., P. Richards e G. Walters, “Factors in Software Quality”, três volumes, NTIS AD-AO49-014, 015, 055. novembro de 1977.

MEYER, B., Object-oriented Software Construction, Prentice-Hall, 1988.

MR-MPS-SW:2012. MPS.BR - Melhoria de Processo do Software Brasileiro. Guia Geral MPS de Software. Copyright 2012 - SOFTEX, 2012.

WATSON, Mike. Managing Smaller Projects: A Practical Approach. Multi-Media Publications Inc., 2006.
